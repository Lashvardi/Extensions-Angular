{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class CaptureScreenComponent {\n  constructor() {\n    // Listen for the screenshot URLs only once in the constructor\n    window.addEventListener('message', event => {\n      if (event.data.type && event.data.type === 'SCREENSHOT_URL') {\n        console.log(event.data.url);\n      }\n    }, false);\n  }\n  ngOnDestroy() {\n    // Remove the event listener when the component is destroyed to avoid memory leaks\n    window.removeEventListener('message', this.handleScreenshotURL);\n  }\n  startCapturing() {\n    window.postMessage({\n      type: 'CAPTURE_SCREENSHOT'\n    }, '*');\n  }\n  stopCapturing() {\n    const event = new CustomEvent('STOP_CAPTURE', {\n      detail: {\n        type: 'STOP_CAPTURE'\n      }\n    });\n    // Dispatch the custom event\n    window.dispatchEvent(event);\n  }\n}\nCaptureScreenComponent.ɵfac = function CaptureScreenComponent_Factory(t) {\n  return new (t || CaptureScreenComponent)();\n};\nCaptureScreenComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CaptureScreenComponent,\n  selectors: [[\"app-capture-screen\"]],\n  decls: 4,\n  vars: 0,\n  consts: [[3, \"click\"]],\n  template: function CaptureScreenComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function CaptureScreenComponent_Template_button_click_0_listener() {\n        return ctx.startCapturing();\n      });\n      i0.ɵɵtext(1, \"Start Capturing\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function CaptureScreenComponent_Template_button_click_2_listener() {\n        return ctx.stopCapturing();\n      });\n      i0.ɵɵtext(3, \"Stop Capturing\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";AAOA,OAAM,MAAOA,sBAAsB;EAGjCC;IACE;IACAC,MAAM,CAACC,gBAAgB,CACrB,SAAS,EACRC,KAAK,IAAI;MACR,IAAIA,KAAK,CAACC,IAAI,CAACC,IAAI,IAAIF,KAAK,CAACC,IAAI,CAACC,IAAI,KAAK,gBAAgB,EAAE;QAC3DC,OAAO,CAACC,GAAG,CAACJ,KAAK,CAACC,IAAI,CAACI,GAAG,CAAC;;IAE/B,CAAC,EACD,KAAK,CACN;EACH;EAEAC,WAAW;IACT;IACAR,MAAM,CAACS,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAACC,mBAAmB,CAAC;EACjE;EAEAC,cAAc;IACZX,MAAM,CAACY,WAAW,CAAC;MAAER,IAAI,EAAE;IAAoB,CAAE,EAAE,GAAG,CAAC;EACzD;EAEAS,aAAa;IACX,MAAMX,KAAK,GAAG,IAAIY,WAAW,CAAC,cAAc,EAAE;MAC5CC,MAAM,EAAE;QAAEX,IAAI,EAAE;MAAc;KAC/B,CAAC;IACF;IACAJ,MAAM,CAACgB,aAAa,CAACd,KAAK,CAAC;EAC7B;;AA/BWJ,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;QAAtBA,sBAAsB;EAAAmB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCPnCC,iCAAmC;MAA3BA;QAAA,OAASC,oBAAgB;MAAA,EAAC;MAACD,+BAAe;MAAAA,iBAAS;MAC3DA,iCAAkC;MAA1BA;QAAA,OAASC,mBAAe;MAAA,EAAC;MAACD,8BAAc;MAAAA,iBAAS","names":["CaptureScreenComponent","constructor","window","addEventListener","event","data","type","console","log","url","ngOnDestroy","removeEventListener","handleScreenshotURL","startCapturing","postMessage","stopCapturing","CustomEvent","detail","dispatchEvent","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\DevTeam\\Desktop\\ExtensionProtocols\\Extension\\src\\app\\capture-screen\\capture-screen.component.ts","C:\\Users\\DevTeam\\Desktop\\ExtensionProtocols\\Extension\\src\\app\\capture-screen\\capture-screen.component.html"],"sourcesContent":["import { Component, OnDestroy } from '@angular/core';\n\n@Component({\n  selector: 'app-capture-screen',\n  templateUrl: './capture-screen.component.html',\n  styleUrls: ['./capture-screen.component.scss'],\n})\nexport class CaptureScreenComponent implements OnDestroy {\n  private captureIntervalId: any;\n\n  constructor() {\n    // Listen for the screenshot URLs only once in the constructor\n    window.addEventListener(\n      'message',\n      (event) => {\n        if (event.data.type && event.data.type === 'SCREENSHOT_URL') {\n          console.log(event.data.url);\n        }\n      },\n      false\n    );\n  }\n\n  ngOnDestroy() {\n    // Remove the event listener when the component is destroyed to avoid memory leaks\n    window.removeEventListener('message', this.handleScreenshotURL);\n  }\n\n  startCapturing() {\n    window.postMessage({ type: 'CAPTURE_SCREENSHOT' }, '*');\n  }\n\n  stopCapturing() {\n    const event = new CustomEvent('STOP_CAPTURE', {\n      detail: { type: 'STOP_CAPTURE' },\n    });\n    // Dispatch the custom event\n    window.dispatchEvent(event);\n  }\n}\n","<button (click)=\"startCapturing()\">Start Capturing</button>\n<button (click)=\"stopCapturing()\">Stop Capturing</button>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}