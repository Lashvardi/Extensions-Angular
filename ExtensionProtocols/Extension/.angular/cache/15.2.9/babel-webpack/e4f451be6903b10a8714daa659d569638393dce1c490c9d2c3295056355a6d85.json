{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nfunction CaptureScreenComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.helloWorldMessage);\n  }\n}\nexport class CaptureScreenComponent {\n  constructor() {\n    this.helloWorldMessage = ''; // Property to store the received message\n    // Create an arrow function to correctly capture the 'this' context\n    this.handleScreenshotURL = event => {\n      if (event.data.type && event.data.type === 'SCREENSHOT_URL') {\n        const message = event.data.url.message;\n        this.helloWorldMessage = message; // Update the property with the received message\n      }\n    };\n    // Listen for the screenshot URLs only once in the constructor\n    window.addEventListener('message', this.handleScreenshotURL, false);\n  }\n  ngOnDestroy() {\n    // Remove the event listener when the component is destroyed to avoid memory leaks\n    window.removeEventListener('message', this.handleScreenshotURL);\n  }\n  startCapturing() {\n    window.postMessage({\n      type: 'CAPTURE_SCREENSHOT'\n    }, '*');\n  }\n  stopCapturing() {\n    const event = new CustomEvent('STOP_CAPTURE', {\n      detail: {\n        type: 'STOP_CAPTURE'\n      }\n    });\n    // Dispatch the custom event\n    window.dispatchEvent(event);\n  }\n}\nCaptureScreenComponent.ɵfac = function CaptureScreenComponent_Factory(t) {\n  return new (t || CaptureScreenComponent)();\n};\nCaptureScreenComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CaptureScreenComponent,\n  selectors: [[\"app-capture-screen\"]],\n  decls: 6,\n  vars: 1,\n  consts: [[3, \"click\"], [4, \"ngIf\"]],\n  template: function CaptureScreenComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function CaptureScreenComponent_Template_button_click_1_listener() {\n        return ctx.startCapturing();\n      });\n      i0.ɵɵtext(2, \"Start Capturing\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function CaptureScreenComponent_Template_button_click_3_listener() {\n        return ctx.stopCapturing();\n      });\n      i0.ɵɵtext(4, \"Stop Capturing\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(5, CaptureScreenComponent_div_5_Template, 3, 1, \"div\", 1);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.helloWorldMessage);\n    }\n  },\n  dependencies: [i1.NgIf],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;IAKEA,2BAA+B;IAC1BA,YAAuB;IAAAA,iBAAI;;;;IAA3BA,eAAuB;IAAvBA,8CAAuB;;;ACC9B,OAAM,MAAOC,sBAAsB;EAKjCC;IAFA,sBAAiB,GAAW,EAAE,CAAC,CAAC;IAG9B;IACA,IAAI,CAACC,mBAAmB,GAAIC,KAAmB,IAAI;MACjD,IAAIA,KAAK,CAACC,IAAI,CAACC,IAAI,IAAIF,KAAK,CAACC,IAAI,CAACC,IAAI,KAAK,gBAAgB,EAAE;QAC3D,MAAMC,OAAO,GAAGH,KAAK,CAACC,IAAI,CAACG,GAAG,CAACD,OAAO;QACtC,IAAI,CAACE,iBAAiB,GAAGF,OAAO,CAAC,CAAC;;IAEtC,CAAC;IAED;IACAG,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAACR,mBAAmB,EAAE,KAAK,CAAC;EACrE;EAEAS,WAAW;IACT;IACAF,MAAM,CAACG,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAACV,mBAAmB,CAAC;EACjE;EAEAW,cAAc;IACZJ,MAAM,CAACK,WAAW,CAAC;MAAET,IAAI,EAAE;IAAoB,CAAE,EAAE,GAAG,CAAC;EACzD;EAEAU,aAAa;IACX,MAAMZ,KAAK,GAAG,IAAIa,WAAW,CAAC,cAAc,EAAE;MAC5CC,MAAM,EAAE;QAAEZ,IAAI,EAAE;MAAc;KAC/B,CAAC;IACF;IACAI,MAAM,CAACS,aAAa,CAACf,KAAK,CAAC;EAC7B;;AAjCWH,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;QAAtBA,sBAAsB;EAAAmB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDPnCxB,2BAAK;MACOA;QAAA,OAASyB,oBAAgB;MAAA,EAAC;MAACzB,+BAAe;MAAAA,iBAAS;MAC3DA,iCAAkC;MAA1BA;QAAA,OAASyB,mBAAe;MAAA,EAAC;MAACzB,8BAAc;MAAAA,iBAAS;MAG3DA,uEAEM;;;MAFAA,eAAuB;MAAvBA,4CAAuB","names":["i0","CaptureScreenComponent","constructor","handleScreenshotURL","event","data","type","message","url","helloWorldMessage","window","addEventListener","ngOnDestroy","removeEventListener","startCapturing","postMessage","stopCapturing","CustomEvent","detail","dispatchEvent","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\DevTeam\\Desktop\\ExtensionProtocols\\Extension\\src\\app\\capture-screen\\capture-screen.component.html","C:\\Users\\DevTeam\\Desktop\\ExtensionProtocols\\Extension\\src\\app\\capture-screen\\capture-screen.component.ts"],"sourcesContent":["<div>\n    <button (click)=\"startCapturing()\">Start Capturing</button>\n    <button (click)=\"stopCapturing()\">Stop Capturing</button>\n  </div>\n  \n  <div *ngIf=\"helloWorldMessage\">\n    <p>{{ helloWorldMessage }}</p>\n  </div>\n  ","import { Component, OnDestroy } from '@angular/core';\n\n@Component({\n  selector: 'app-capture-screen',\n  templateUrl: './capture-screen.component.html',\n  styleUrls: ['./capture-screen.component.scss'],\n})\nexport class CaptureScreenComponent implements OnDestroy {\n  private captureIntervalId: any;\n  private handleScreenshotURL: (event: MessageEvent) => void;\n  helloWorldMessage: string = ''; // Property to store the received message\n\n  constructor() {\n    // Create an arrow function to correctly capture the 'this' context\n    this.handleScreenshotURL = (event: MessageEvent) => {\n      if (event.data.type && event.data.type === 'SCREENSHOT_URL') {\n        const message = event.data.url.message;\n        this.helloWorldMessage = message; // Update the property with the received message\n      }\n    };\n\n    // Listen for the screenshot URLs only once in the constructor\n    window.addEventListener('message', this.handleScreenshotURL, false);\n  }\n\n  ngOnDestroy() {\n    // Remove the event listener when the component is destroyed to avoid memory leaks\n    window.removeEventListener('message', this.handleScreenshotURL);\n  }\n\n  startCapturing() {\n    window.postMessage({ type: 'CAPTURE_SCREENSHOT' }, '*');\n  }\n\n  stopCapturing() {\n    const event = new CustomEvent('STOP_CAPTURE', {\n      detail: { type: 'STOP_CAPTURE' },\n    });\n    // Dispatch the custom event\n    window.dispatchEvent(event);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}